This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  app/
    (frontend)/
      globals.css
      layout.tsx
      page.tsx
    (payload)/
      admin/
        [[...segments]]/
          not-found.tsx
          page.tsx
        importMap.js
      api/
        [...slug]/
          route.ts
        graphql/
          route.ts
        graphql-playground/
          route.ts
      layout.tsx
    my-route/
      route.ts
    layout.tsx
    postcss.config.js
  collections/
    Media.ts
    Users.ts
  payload-types.ts
  payload.config.ts
.gitignore
.prettierrc.json
docker-compose.yml
Dockerfile
eslint.config.mjs
next.config.mjs
package.json
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/app/(frontend)/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-sailor text-gray-200 font-sans;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-display font-bold text-white;
  }

  h1 {
    @apply text-4xl md:text-5xl lg:text-6xl;
  }

  h2 {
    @apply text-3xl md:text-4xl;
  }

  p {
    @apply text-base leading-relaxed;
  }

  a {
    @apply text-gold hover:text-gold-100 transition-colors duration-200;
  }
}
</file>

<file path="src/app/(payload)/admin/[[...segments]]/not-found.tsx">
/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */
/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */
import type { Metadata } from 'next'

import config from '@payload-config'
import { NotFoundPage, generatePageMetadata } from '@payloadcms/next/views'
import { importMap } from '../importMap'

type Args = {
  params: Promise<{
    segments: string[]
  }>
  searchParams: Promise<{
    [key: string]: string | string[]
  }>
}

export const generateMetadata = ({ params, searchParams }: Args): Promise<Metadata> =>
  generatePageMetadata({ config, params, searchParams })

const NotFound = ({ params, searchParams }: Args) =>
  NotFoundPage({ config, params, searchParams, importMap })

export default NotFound
</file>

<file path="src/app/(payload)/admin/[[...segments]]/page.tsx">
/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */
/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */
import type { Metadata } from 'next'

import config from '@payload-config'
import { RootPage, generatePageMetadata } from '@payloadcms/next/views'
import { importMap } from '../importMap'

type Args = {
  params: Promise<{
    segments: string[]
  }>
  searchParams: Promise<{
    [key: string]: string | string[]
  }>
}

export const generateMetadata = ({ params, searchParams }: Args): Promise<Metadata> =>
  generatePageMetadata({ config, params, searchParams })

const Page = ({ params, searchParams }: Args) =>
  RootPage({ config, params, searchParams, importMap })

export default Page
</file>

<file path="src/app/(payload)/api/[...slug]/route.ts">
/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */
/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */
import config from '@payload-config'
import '@payloadcms/next/css'
import {
  REST_DELETE,
  REST_GET,
  REST_OPTIONS,
  REST_PATCH,
  REST_POST,
  REST_PUT,
} from '@payloadcms/next/routes'

export const GET = REST_GET(config)
export const POST = REST_POST(config)
export const DELETE = REST_DELETE(config)
export const PATCH = REST_PATCH(config)
export const PUT = REST_PUT(config)
export const OPTIONS = REST_OPTIONS(config)
</file>

<file path="src/app/(payload)/api/graphql/route.ts">
/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */
/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */
import config from '@payload-config'
import { GRAPHQL_POST, REST_OPTIONS } from '@payloadcms/next/routes'

export const POST = GRAPHQL_POST(config)

export const OPTIONS = REST_OPTIONS(config)
</file>

<file path="src/app/(payload)/api/graphql-playground/route.ts">
/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */
/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */
import config from '@payload-config'
import '@payloadcms/next/css'
import { GRAPHQL_PLAYGROUND_GET } from '@payloadcms/next/routes'

export const GET = GRAPHQL_PLAYGROUND_GET(config)
</file>

<file path="src/app/(payload)/layout.tsx">
/* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. */
/* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. */
import config from '@payload-config'
import '@payloadcms/next/css'
import type { ServerFunctionClient } from 'payload'
import { handleServerFunctions, RootLayout } from '@payloadcms/next/layouts'
import React from 'react'

import { importMap } from './admin/importMap.js'
import './custom.scss'

type Args = {
  children: React.ReactNode
}

const serverFunction: ServerFunctionClient = async function (args) {
  'use server'
  return handleServerFunctions({
    ...args,
    config,
    importMap,
  })
}

const Layout = ({ children }: Args) => (
  <RootLayout config={config} importMap={importMap} serverFunction={serverFunction}>
    {children}
  </RootLayout>
)

export default Layout
</file>

<file path="src/app/my-route/route.ts">
import configPromise from '@payload-config'
import { getPayload } from 'payload'

export const GET = async (request: Request) => {
  const payload = await getPayload({
    config: configPromise,
  })

  return Response.json({
    message: 'This is an example of a custom route.',
  })
}
</file>

<file path="src/app/layout.tsx">
import React from 'react'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
</file>

<file path="src/app/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="src/collections/Media.ts">
import type { CollectionConfig } from 'payload'

export const Media: CollectionConfig = {
  slug: 'media',
  access: {
    read: () => true,
  },
  fields: [
    {
      name: 'alt',
      type: 'text',
      required: true,
    },
  ],
  upload: true,
}
</file>

<file path="src/collections/Users.ts">
import type { CollectionConfig } from 'payload'

export const Users: CollectionConfig = {
  slug: 'users',
  admin: {
    useAsTitle: 'email',
  },
  auth: true,
  fields: [
    // Email added by default
    // Add more fields as needed
  ],
}
</file>

<file path=".prettierrc.json">
{
  "singleQuote": true,
  "trailingComma": "all",
  "printWidth": 100,
  "semi": false
}
</file>

<file path="Dockerfile">
# To use this Dockerfile, you have to set `output: 'standalone'` in your next.config.mjs file.
# From https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile

FROM node:22.12.0-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi


# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Remove this line if you do not have this folder
COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD HOSTNAME="0.0.0.0" node server.js
</file>

<file path="eslint.config.mjs">
import { dirname } from 'path'
import { fileURLToPath } from 'url'
import { FlatCompat } from '@eslint/eslintrc'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const compat = new FlatCompat({
  baseDirectory: __dirname,
})

const eslintConfig = [
  ...compat.extends('next/core-web-vitals', 'next/typescript'),
  {
    rules: {
      '@typescript-eslint/ban-ts-comment': 'warn',
      '@typescript-eslint/no-empty-object-type': 'warn',
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/no-unused-vars': [
        'warn',
        {
          vars: 'all',
          args: 'after-used',
          ignoreRestSiblings: false,
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          destructuredArrayIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^(_|ignore)',
        },
      ],
    },
  },
  {
    ignores: ['.next/'],
  },
]

export default eslintConfig
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
import defaultTheme from 'tailwindcss/defaultTheme'

const tailwindConfig = {
  content: [
    './src/app/(frontend)/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/collections/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        sailor: {
          DEFAULT: '#102E50', // primary dark navy
          100: '#324B73', // lighter shade
          200: '#507798',
          300: '#6D93BC',
          400: '#8CB0E0',
        },
        gold: {
          DEFAULT: '#F5C45E', // mustard/gold accent
          100: '#F9D78C',
          200: '#FBD9A7',
          300: '#FCEAC2',
        },
        orange: {
          DEFAULT: '#E78B48', // team orange
          100: '#EC9D69',
          200: '#F1AE8A',
        },
        red: {
          DEFAULT: '#BE3D2A', // bold red
          100: '#D25A46',
          200: '#E48B79',
        },
      },
      fontFamily: {
        sans: ['var(--font-hubot)', ...defaultTheme.fontFamily.sans],
        display: ['var(--font-mona)', ...defaultTheme.fontFamily.sans],
      },
    },
  },
  plugins: [],
}

export default tailwindConfig
</file>

<file path="src/app/(payload)/admin/importMap.js">
export const importMap = {

}
</file>

<file path="README.md">
# Hockey Team Website - Headless CMS

This repository contains the content management "brain" for the Hockey Team Website. It is a headless CMS built with **Payload 3.0** and **Next.js 15**, designed for a modern, scalable, and maintainable web architecture.


## Core Technologies

*   **CMS:** [Payload 3.0](https://payloadcms.com)
*   **Framework:** [Next.js 15](https://nextjs.org) (for the admin panel)
*   **Database:** [MongoDB](https://www.mongodb.com/)
*   **Containerization:** [Docker](https://www.docker.com/)
*   **Deployment:** [Coolify](https://coolify.io) (CI/CD from GitHub)

---

## Why Payload CMS over WordPress?

Choosing Payload CMS for this project was a strategic decision to prioritize developer experience, performance, and long-term maintainability over the traditional approach of WordPress.

| Feature                  | Payload CMS (This Project)                                                              | WordPress                                                                          |
| ------------------------ | --------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |
| **Architecture**         | **Headless-first.** Decouples content from presentation. Use any frontend framework.      | Monolithic by default. The REST API can be slow and requires extra configuration.  |
| **Configuration**        | **Code-as-Config.** Data models are defined in TypeScript. Schema is version-controlled. | **Database-driven.** Relies on UI clicks and database state. Fragile and hard to version. |
| **Tech Stack**           | **Modern.** Built on Node.js, React, and TypeScript. Fast, secure, and familiar to modern devs. | PHP-based. A large ecosystem, but can feel dated and has a higher learning curve for JS devs. |
| **Extensibility**        | **Clean & Controlled.** Add features via clean code. No "plugin hell."                    | **Plugin-dependent.** Functionality relies on third-party plugins of varying quality and security. |
| **Security**             | **Minimal Attack Surface.** You control the entire codebase. No bloated, insecure plugins. | A massive target for hackers. Security depends on constant updates and plugin vigilance. |
| **Developer Experience** | **Exceptional.** Type-safety, powerful local development, and a clean, modern API.       | Can be cumbersome, with a mix of PHP templates, hooks, and a complex database schema. |

---

## The Benefits of Self-Hosting with Coolify

Instead of paying for a managed CMS service (like Contentful or Sanity) or premium WordPress hosting (like WP Engine), this project is self-hosted on a Virtual Private Server (VPS) and managed via Coolify. This provides the best of both worlds: total control and a modern DevOps experience.

#### 1. Drastic Cost Reduction
Managed CMS platforms charge based on usage metrics like API calls, users, and content records. These costs can become unpredictable and expensive as the site grows.

*   **Managed CMS:** Can range from $100 to $1000+/month for a high-traffic site.
*   **Self-Hosted on a VPS:** A fixed, predictable cost (typically $10-$40/month) for the server, regardless of traffic or data volume.

#### 2. Complete Data Ownership & No Vendor Lock-In
Your content, user data, and media files reside in *your* database on *your* server.
*   **Control:** You have full control over backups, data sovereignty, and security policies.
*   **Flexibility:** You can migrate your entire stack to another provider at any time without being locked into a proprietary API or data structure.

#### 3. No Artificial Limitations
Self-hosting removes the arbitrary limits on API calls, content types, or admin users that are common with SaaS platforms. The only limits are the resources of your server.

#### 4. The "PaaS" Experience with Coolify
Coolify provides the polished, Git-driven deployment workflow of a Platform-as-a-Service (like Vercel or Heroku) for your own server. It automates:
*   **CI/CD:** Automatically builds and deploys from GitHub pushes.
*   **SSL Certificates:** Free, automatic SSL via Let's Encrypt.
*   **Database Management:** Easy provisioning and connection string management.
*   **Environment Variables:** Securely injects secrets for staging and production.

---

## Local Development

This project is configured to run locally using Docker and Docker Compose, ensuring a consistent environment that mirrors production.

#### Prerequisites
*   [Docker](https://www.docker.com/get-started)

#### Running the Project

1.  **Set up environment variables:**
    ```bash
    cp .env.example .env
    ```
    > **Important:** Open the new `.env` file and replace the placeholder values. The `DATABASE_URI` should point to the Docker-hosted mongo service: `mongodb://mongo:27017/hockey-cms-dev`.

2.  **Start the services:**
    ```bash
    docker-compose up
    ```

3.  **Access the application:**
    *   **Admin Panel:** http://localhost:3000/admin

The first time you access the admin panel, Payload will prompt you to create your first administrative user.

## Deployment

Deployment is handled automatically by Coolify via webhooks connected to this GitHub repository.

*   **Production:** A push or merge to the `main` branch will trigger a production deployment.
*   **Staging:** A push or merge to the `staging` (or `develop`) branch will trigger a deployment to the staging environment.

Coolify uses the `Dockerfile` in this repository to build a production-optimized container image. Environment variables (like the database URI and payload secret) are injected securely from the Coolify dashboard.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{ "name": "next" }],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "tailwind.config.js",
    "next.config.mjs"
  ],
  "exclude": ["node_modules"]
}
</file>

<file path="src/payload-types.ts">
/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
</file>

<file path="src/payload.config.ts">
import { mongooseAdapter } from '@payloadcms/db-mongodb'
import { lexicalEditor } from '@payloadcms/richtext-lexical'
import path from 'path'
import { buildConfig } from 'payload'
import { fileURLToPath } from 'url'
import sharp from 'sharp'

import { Users } from './collections/Users'
import { Media } from './collections/Media'

const filename = fileURLToPath(import.meta.url)
const dirname = path.dirname(filename)

export default buildConfig({
  admin: {
    user: Users.slug,
  },
  collections: [Users, Media],
  editor: lexicalEditor(),
  secret: process.env.PAYLOAD_SECRET || '',
  typescript: {
    outputFile: path.resolve(dirname, 'payload-types.ts'),
  },
  db: mongooseAdapter({
    url: process.env.DATABASE_URI || '',
  }),
  sharp,
  plugins: [
    // storage-adapter-placeholder
  ],
})
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

/.idea/*
!/.idea/runConfigurations

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.env
.env.local
.env.staging
.env.production
/media

# Playwright
node_modules/
/test-results/
/playwright-report/
/blob-report/
/playwright/.cache/

# Package manager caches
.pnpm-store/

# Docker artifacts
docker-compose.override.yml
.dockerignore

# Build artifacts
.next/cache/
payload-build/

# Lockfiles (non-active package managers)
pnpm-lock.yaml
</file>

<file path="docker-compose.yml">
version: '3'

services:
  # This service runs the MongoDB database in a container.
  # It's the only service needed for local development.
  mongo:
    image: mongo:latest
    container_name: payload-mongo-db
    ports:
      - '27017:27017'
    restart: unless-stopped
    command:
      - --storageEngine=wiredTiger
    volumes:
      - data:/data/db
    logging:
      driver: none

volumes:
  data:
</file>

<file path="next.config.mjs">
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

/** @type {import('next').NextConfig} */
const nextConfig = {
  /*
    The `output: 'standalone'` option is required by the provided Dockerfile.
    It creates a standalone folder with only the necessary files for production,
    minimizing the Docker image size.
  */
  output: 'standalone',

  webpack: (config) => {
    // This explicitly configures the Webpack resolver to ensure it
    // understands the `@/` path alias, fixing the font loading issue.
    config.resolve.alias['@'] = path.resolve(__dirname, './src')
    return config
  },
}

export default nextConfig
</file>

<file path="src/app/(frontend)/layout.tsx">
import localFont from 'next/font/local'
import React from 'react'
import './globals.css'

const mona = localFont({
  src: '@/fonts/MonaSansVF-Regular.woff2',
  variable: '--font-mona',
})

const hubot = localFont({
  src: '@/fonts/HubotSansVF-Regular.ttf',
  variable: '--font-hubot',
})

export const metadata = {
  description: 'A blank template using Payload in a Next.js app.',
  title: 'Payload Blank Template',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={`${hubot.variable} ${mona.variable}`}>
      <body>{children}</body>
    </html>
  )
}
</file>

<file path="src/app/(frontend)/page.tsx">
import React from 'react'

// Helper component for a color swatch
const ColorSwatch = ({ name, className }: { name: string; className: string }) => (
  <div>
    <div className={`h-24 rounded-lg shadow-md ${className}`}></div>
    <p className="mt-2 text-center font-mono text-sm text-gray-300">{name}</p>
  </div>
)

// ===================================
// Main Page Component
// ===================================
export default function HomePage() {
  return (
    <div className="bg-sailor text-white min-h-screen flex flex-col">
      <main className="flex-grow container mx-auto px-4 py-16">
        <div className="text-center mb-16">
          <h1 className="text-5xl md:text-7xl font-display font-extrabold text-gold uppercase tracking-wider">
            Theme Showcase
          </h1>
          <p className="text-xl md:text-2xl text-gray-300 mt-2">
            A showcase of the default colors and fonts.
          </p>
        </div>

        <div className="space-y-16">
          {/* Colors Section */}
          <section>
            <h2 className="text-4xl font-display text-center mb-8">Colors</h2>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-8 max-w-5xl mx-auto">
              {/* Sailor Palette */}
              <ColorSwatch name="sailor" className="bg-sailor border border-sailor-100" />
              <ColorSwatch name="sailor-100" className="bg-sailor-100" />
              <ColorSwatch name="sailor-200" className="bg-sailor-200" />
              <ColorSwatch name="sailor-300" className="bg-sailor-300" />
              <ColorSwatch name="sailor-400" className="bg-sailor-400" />
              {/* Gold Palette */}
              <ColorSwatch name="gold" className="bg-gold" />
              <ColorSwatch name="gold-100" className="bg-gold-100" />
              <ColorSwatch name="gold-200" className="bg-gold-200" />
              <ColorSwatch name="gold-300" className="bg-gold-300" />
              {/* Accent Palettes */}
              <ColorSwatch name="orange" className="bg-orange" />
              <ColorSwatch name="orange-100" className="bg-orange-100" />
              <ColorSwatch name="orange-200" className="bg-orange-200" />
              <ColorSwatch name="red" className="bg-red" />
              <ColorSwatch name="red-100" className="bg-red-100" />
              <ColorSwatch name="red-200" className="bg-red-200" />
            </div>
          </section>

          {/* Typography Section */}
          <section>
            <h2 className="text-4xl font-display text-center mb-8">Typography</h2>
            <div className="bg-sailor-100 p-8 rounded-lg space-y-6 max-w-4xl mx-auto">
              <div className="space-y-4">
                <p className="text-sm uppercase tracking-widest text-gold-100 mb-2">
                  Display Font (font-display)
                </p>
                <h3 className="font-display text-4xl font-extrabold text-white">
                  The quick brown fox jumps over
                </h3>
                <p className="font-display text-2xl font-light">
                  The quick brown fox jumps over (Light)
                </p>
              </div>
              <div>
                <p className="text-sm uppercase tracking-widest text-gold-100 mb-2">
                  Body Font (default)
                </p>
                <p className="text-lg text-gray-300">
                  The quick brown fox jumps over the lazy dog. This is the default body font, used
                  for paragraphs and other general text content. It is designed for readability.
                </p>
              </div>
              <div className="border-t border-sailor-200 pt-6 space-y-4">
                <p className="text-sm uppercase tracking-widest text-gold-100">
                  Font Weights (Body/Sans)
                </p>
                <p className="font-light">Font Light</p>
                <p className="font-normal">Font Normal</p>
                <p className="font-medium">Font Medium</p>
                <p className="font-semibold">Font Semibold</p>
                <p className="font-bold">Font Bold</p>
                <p className="font-extrabold">Font Extrabold</p>
              </div>
              <div className="border-t border-sailor-200 pt-6 flex flex-wrap gap-x-8 gap-y-4 items-baseline">
                <p className="text-xs">text-xs</p>
                <p className="text-sm">text-sm</p>
                <p>text-base</p>
                <p className="text-lg">text-lg</p>
                <p className="text-xl">text-xl</p>
                <p className="text-2xl">text-2xl</p>
                <p className="text-3xl">text-3xl</p>
                <p className="text-4xl">text-4xl</p>
                <p className="text-5xl">text-5xl</p>
              </div>
            </div>
          </section>
        </div>
      </main>
      <footer className="bg-sailor-100 text-center py-6 mt-16 border-t-2 border-gold">
        <p className="text-gray-300">
          © {new Date().getFullYear()} Payload App. All Rights Reserved.
        </p>
        <p className="text-sm text-gray-400 mt-1">Powered by Payload CMS & Next.js</p>
      </footer>
    </div>
  )
}
</file>

<file path="package.json">
{
  "name": "hockey-cms",
  "version": "1.0.0",
  "description": "Headless CMS for the Hockey Team Website",
  "license": "MIT",
  "type": "module",
  "scripts": {
    "dev": "cross-env-file -p .env.local next dev",
    "dev:staging": "cross-env-file -p .env.staging next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "payload": "payload",
    "generate:types": "payload generate:types",
    "seed:local": "cross-env-file -p .env.local ts-node src/payload/seed/index.ts",
    "seed:staging": "cross-env-file -p .env.staging ts-node src/payload/seed/index.ts",
    "seed:production": "cross-env-file -p .env.production ts-node src/payload/seed/index.ts",
    "test": "pnpm run test:int && pnpm run test:e2e",
    "test:e2e": "playwright test",
    "test:int": "vitest run --config ./vitest.config.mts"
  },
  "dependencies": {
    "@payloadcms/db-mongodb": "^3.0.0",
    "@payloadcms/next": "^3.0.0",
    "@payloadcms/plugin-cloud-storage": "^3.0.0",
    "@payloadcms/richtext-lexical": "^3.0.0",
    "@payloadcms/ui": "^3.0.0",
    "cross-env": "^7.0.3",
    "dotenv": "^16.4.5",
    "graphql": "^16.8.1",
    "next": "^15.3.4",
    "payload": "^3.0.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "sharp": "0.32.6"
  },
  "devDependencies": {
    "@playwright/test": "^1.44.0",
    "@testing-library/react": "^15.0.6",
    "@types/node": "^20.12.12",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.19",
    "cross-env-file": "^1.0.2",
    "eslint": "^9.30.1",
    "eslint-config-next": "^14.2.3",
    "jsdom": "^24.0.0",
    "playwright": "^1.44.0",
    "postcss": "^8.4.38",
    "prettier": "^3.2.5",
    "tailwindcss": "^3.4.3",
    "ts-node": "^10.9.2",
    "typescript": "^5.4.5",
    "vitest": "^1.6.0"
  },
  "engines": {
    "node": "^18.20.2 || >=20.9.0"
  },
  "pnpm": {
    "onlyBuiltDependencies": [
      "sharp",
      "esbuild",
      "unrs-resolver"
    ]
  }
}
</file>

</files>
